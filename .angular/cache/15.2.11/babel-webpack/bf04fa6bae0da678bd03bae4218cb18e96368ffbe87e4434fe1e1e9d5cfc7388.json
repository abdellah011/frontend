{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserServiceTsService = /*#__PURE__*/(() => {\n  class UserServiceTsService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = `${environment.apiBaseUrl}/Users`; // ✅ Correct base URL\n    }\n    // ✅ GET all users\n    getUsers() {\n      return this.http.get(this.apiUrl);\n    }\n    // ✅ Add user with error handling\n    addUser(user) {\n      console.log('Sending user:', user);\n      return this.http.post(this.apiUrl, user).pipe(catchError(this.handleError) // ✅ Gérer les erreurs\n      );\n    }\n    // ✅ DELETE a user by ID\n    deleteUser(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`);\n    }\n    // ✅ Update user\n    updateUser(user) {\n      return this.http.put(`${this.apiUrl}/${user.id}`, user, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    // ✅ Gestion des erreurs\n    handleError(error) {\n      console.error('Erreur du backend:', error); // ✅ Affiche l'erreur en console pour debug\n      let errorMessage = \"Une erreur s'est produite. Veuillez réessayer.\";\n      if (error.error) {\n        if (error.error.Message) {\n          errorMessage = error.error.Message; // ✅ Vérifie si \"Message\" existe\n        } else if (error.error.message) {\n          errorMessage = error.error.message; // ✅ Vérifie si \"message\" existe\n        }\n      }\n\n      return throwError(errorMessage); // ✅ Renvoie le bon message\n    }\n    static #_ = this.ɵfac = function UserServiceTsService_Factory(t) {\n      return new (t || UserServiceTsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserServiceTsService,\n      factory: UserServiceTsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UserServiceTsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}