{"ast":null,"code":"import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'app/services/auth.service';\nimport { NgToastService } from 'ng-angular-popup';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"app/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ng-angular-popup\";\nimport * as i5 from \"@angular/common\";\n\nfunction LoginComponent_small_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 8);\n    i0.ɵɵtext(1, \"Username reqiurede\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_small_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 8);\n    i0.ɵɵtext(1, \"Psswordreqiurede\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, auth, router, toast) {\n      this.fb = fb;\n      this.auth = auth;\n      this.router = router;\n      this.toast = toast;\n    }\n\n    ngOnInit() {\n      this.loginForm = this.fb.group({\n        name: ['', [Validators.required]],\n        Password: ['', [Validators.required]] // ✅ Ajout de minLength(6)\n\n      });\n    }\n\n    onlogin() {\n      if (this.loginForm.valid) {\n        this.auth.login(this.loginForm.value).subscribe({\n          next: res => {\n            alert(res.message);\n            this.toast.success({\n              detail: \"SUCCESS\",\n              summary: res.message,\n              duration: 5000,\n              charAt: function (pos) {\n                throw new Error('Function not implemented.');\n              },\n              charCodeAt: function (index) {\n                throw new Error('Function not implemented.');\n              },\n              concat: function (...strings) {\n                throw new Error('Function not implemented.');\n              },\n              indexOf: function (searchString, position) {\n                throw new Error('Function not implemented.');\n              },\n              lastIndexOf: function (searchString, position) {\n                throw new Error('Function not implemented.');\n              },\n              localeCompare: function (that) {\n                throw new Error('Function not implemented.');\n              },\n              match: function (regexp) {\n                throw new Error('Function not implemented.');\n              },\n              replace: function (searchValue, replaceValue) {\n                throw new Error('Function not implemented.');\n              },\n              search: function (regexp) {\n                throw new Error('Function not implemented.');\n              },\n              slice: function (start, end) {\n                throw new Error('Function not implemented.');\n              },\n              split: function (separator, limit) {\n                throw new Error('Function not implemented.');\n              },\n              substring: function (start, end) {\n                throw new Error('Function not implemented.');\n              },\n              toLowerCase: function () {\n                throw new Error('Function not implemented.');\n              },\n              toLocaleLowerCase: function (locales) {\n                throw new Error('Function not implemented.');\n              },\n              toUpperCase: function () {\n                throw new Error('Function not implemented.');\n              },\n              toLocaleUpperCase: function (locales) {\n                throw new Error('Function not implemented.');\n              },\n              trim: function () {\n                throw new Error('Function not implemented.');\n              },\n              length: 0,\n              substr: function (from, length) {\n                throw new Error('Function not implemented.');\n              },\n              codePointAt: function (pos) {\n                throw new Error('Function not implemented.');\n              },\n              includes: function (searchString, position) {\n                throw new Error('Function not implemented.');\n              },\n              endsWith: function (searchString, endPosition) {\n                throw new Error('Function not implemented.');\n              },\n              normalize: function (form) {\n                throw new Error('Function not implemented.');\n              },\n              repeat: function (count) {\n                throw new Error('Function not implemented.');\n              },\n              startsWith: function (searchString, position) {\n                throw new Error('Function not implemented.');\n              },\n              anchor: function (name) {\n                throw new Error('Function not implemented.');\n              },\n              big: function () {\n                throw new Error('Function not implemented.');\n              },\n              blink: function () {\n                throw new Error('Function not implemented.');\n              },\n              bold: function () {\n                throw new Error('Function not implemented.');\n              },\n              fixed: function () {\n                throw new Error('Function not implemented.');\n              },\n              fontcolor: function (color) {\n                throw new Error('Function not implemented.');\n              },\n              fontsize: function (size) {\n                throw new Error('Function not implemented.');\n              },\n              italics: function () {\n                throw new Error('Function not implemented.');\n              },\n              link: function (url) {\n                throw new Error('Function not implemented.');\n              },\n              small: function () {\n                throw new Error('Function not implemented.');\n              },\n              strike: function () {\n                throw new Error('Function not implemented.');\n              },\n              sub: function () {\n                throw new Error('Function not implemented.');\n              },\n              sup: function () {\n                throw new Error('Function not implemented.');\n              },\n              padStart: function (maxLength, fillString) {\n                throw new Error('Function not implemented.');\n              },\n              padEnd: function (maxLength, fillString) {\n                throw new Error('Function not implemented.');\n              },\n              trimEnd: function () {\n                throw new Error('Function not implemented.');\n              },\n              trimStart: function () {\n                throw new Error('Function not implemented.');\n              },\n              trimLeft: function () {\n                throw new Error('Function not implemented.');\n              },\n              trimRight: function () {\n                throw new Error('Function not implemented.');\n              },\n              matchAll: function (regexp) {\n                throw new Error('Function not implemented.');\n              },\n              [Symbol.iterator]: function () {\n                throw new Error('Function not implemented.');\n              },\n              at: function (index) {\n                throw new Error('Function not implemented.');\n              }\n            });\n            this.router.navigate(['../../pages/dashboard']);\n          },\n          error: err => {\n            alert(err?.error.message);\n          }\n        });\n      } else {\n        console.log('Formulaire non valide ');\n        this.validateFormFields(this.loginForm);\n        alert(\"Le Formulaire n'est pas valide\");\n      }\n    }\n\n    validateFormFields(formGroup) {\n      Object.keys(formGroup.controls).forEach(field => {\n        const control = formGroup.get(field);\n\n        if (control instanceof FormControl) {\n          control.markAsDirty({\n            onlySelf: true\n          });\n        } else if (control instanceof FormGroup) {\n          this.validateFormFields(control);\n        }\n      });\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.NgToastService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 14,\n    vars: 3,\n    consts: [[3, \"formGroup\"], [1, \"mb-3\"], [\"for\", \"exampleInputEmail1\", 1, \"form-label\"], [\"formControlName\", \"name\", \"type\", \"text\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"formControlName\", \"Password\", \"type\", \"password\", \"id\", \"exampleInputPassword1\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"text-danger\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"label\", 2);\n        i0.ɵɵtext(3, \"Nom \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(4, \"input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(5, LoginComponent_small_5_Template, 2, 0, \"small\", 4);\n        i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 5);\n        i0.ɵɵtext(8, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(10, LoginComponent_small_10_Template, 2, 0, \"small\", 4);\n        i0.ɵɵelement(11, \"tr\");\n        i0.ɵɵelementStart(12, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_12_listener() {\n          return ctx.onlogin();\n        });\n        i0.ɵɵtext(13, \"Submit\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"name\"].dirty && ctx.loginForm.controls[\"name\"].hasError(\"required\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"Password\"].dirty && ctx.loginForm.controls[\"Password\"].hasError(\"required\"));\n      }\n    },\n    dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}