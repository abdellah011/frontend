{"ast":null,"code":"import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'app/services/auth.service';\nimport { NgToastService } from 'ng-angular-popup';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"app/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ng-angular-popup\";\nimport * as i5 from \"@angular/common\";\nfunction LoginComponent_small_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 8);\n    i0.ɵɵtext(1, \"Username reqiurede\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_small_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 8);\n    i0.ɵɵtext(1, \"Psswordreqiurede\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, auth, router, toast) {\n      this.fb = fb;\n      this.auth = auth;\n      this.router = router;\n      this.toast = toast;\n    }\n    ngOnInit() {\n      this.loginForm = this.fb.group({\n        name: ['', [Validators.required]],\n        // ✅ Ajout de Validators.Nom\n        Password: ['', [Validators.required]] // ✅ Ajout de minLength(6)\n      });\n    }\n    onlogin() {\n      if (this.loginForm.valid) {\n        this.auth.login(this.loginForm.value).subscribe({\n          next: res => {\n            console.log(\"Réponse du serveur:\", res); // ✅ Vérifie ce que l'API retourne\n            if (res?.Message) {\n              this.toast.success(res.Message); // ✅ Affichage popup success\n              this.router.navigate(['../../pages/dashboard']);\n            } else {\n              console.error(\"Réponse invalide :\", res);\n              this.toast.danger(\"Erreur: Réponse du serveur invalide\"); // ✅ Affichage popup erreur\n            }\n          },\n          error: err => {\n            console.log(\"Erreur API:\", err); // ✅ Vérifie le message d'erreur reçu\n            this.toast.da(err?.error?.Message || \"Une erreur est survenue\"); // ✅ Affichage popup erreur API\n          }\n        });\n      } else {\n        console.log('Formulaire non valide');\n        this.validateFormFields(this.loginForm);\n        this.toast.warning(\"Attention: Le formulaire n'est pas valide\"); // ✅ Affichage popup attention\n      }\n    }\n    validateFormFields(formGroup) {\n      Object.keys(formGroup.controls).forEach(field => {\n        const control = formGroup.get(field);\n        if (control instanceof FormControl) {\n          control.markAsDirty({\n            onlySelf: true\n          });\n        } else if (control instanceof FormGroup) {\n          this.validateFormFields(control);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.NgToastService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 14,\n      vars: 3,\n      consts: [[3, \"formGroup\"], [1, \"mb-3\"], [\"for\", \"exampleInputEmail1\", 1, \"form-label\"], [\"formControlName\", \"name\", \"type\", \"text\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"formControlName\", \"Password\", \"type\", \"password\", \"id\", \"exampleInputPassword1\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"text-danger\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"label\", 2);\n          i0.ɵɵtext(3, \"Nom \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(4, \"input\", 3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(5, LoginComponent_small_5_Template, 2, 0, \"small\", 4);\n          i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 5);\n          i0.ɵɵtext(8, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(9, \"input\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(10, LoginComponent_small_10_Template, 2, 0, \"small\", 4);\n          i0.ɵɵelement(11, \"tr\");\n          i0.ɵɵelementStart(12, \"button\", 7);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_12_listener() {\n            return ctx.onlogin();\n          });\n          i0.ɵɵtext(13, \"Submit\");\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"name\"].dirty && ctx.loginForm.controls[\"name\"].hasError(\"required\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", ctx.loginForm.controls[\"Password\"].dirty && ctx.loginForm.controls[\"Password\"].hasError(\"required\"));\n        }\n      },\n      dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n    });\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}