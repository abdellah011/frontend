{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { AuthService } from 'app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\nlet default_1 = class {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n  }\n  intercept(req, next) {\n    const myToken = this.auth.getToken();\n    // VÃ©rifier immÃ©diatement si le token est expirÃ© AVANT d'envoyer la requÃªte\n    if (this.auth.isTokenExpired()) {\n      console.warn(\"ðŸ”´ Token expirÃ© ! DÃ©connexion...\");\n      this.auth.signOut();\n      this.router.navigate(['/login']);\n      return throwError(() => new Error(\"Token expirÃ©\"));\n    }\n    let authReq = req;\n    if (myToken) {\n      authReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${myToken}`\n        }\n      });\n    }\n    return next.handle(authReq).pipe(catchError(err => {\n      if (err instanceof HttpErrorResponse) {\n        console.error(\"ðŸš¨ Erreur HTTP interceptÃ©e :\", err);\n        if (err.status === 401) {\n          // 401 Unauthorized\n          console.warn(\"ðŸš¨ Non autorisÃ© ! DÃ©connexion...\");\n          this.auth.signOut();\n          this.router.navigate(['/login']);\n        }\n      }\n      return throwError(() => err);\n    }));\n  }\n};\ndefault_1 = __decorate([Injectable(), __metadata(\"design:paramtypes\", [AuthService, Router])], default_1);\nexport { default_1 };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}