{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { AuthService } from 'app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n    }\n    intercept(req, next) {\n      const myToken = this.auth.getToken();\n      if (myToken) {\n        try {\n          const tokenPayload = JSON.parse(atob(myToken.split('.')[1])); // 🔍 Décodage du token JWT\n          console.log(\"Expiration du token :\", new Date(tokenPayload.exp * 1000));\n          // Vérifier si le token est expiré\n          if (Date.now() >= tokenPayload.exp * 1000) {\n            console.warn(\"🔴 Token expiré ! Redirection vers /login...\");\n            this.auth.signOut();\n            this.router.navigate(['/login']);\n            return throwError(() => new Error(\"Token expiré\"));\n          }\n        } catch (error) {\n          console.error(\"Erreur lors du décodage du token :\", error);\n        }\n      }\n      // Ajouter l'en-tête Authorization si un token existe\n      let authReq = req;\n      if (myToken) {\n        authReq = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${myToken}`\n          }\n        });\n      }\n      console.log(\"✅ Requête interceptée :\", authReq);\n      return next.handle(authReq).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          console.error(\"❌ Erreur HTTP interceptée :\", err);\n          if (err.status === 401) {\n            // 401 Unauthorized\n            console.warn(\"🔴 Non autorisé ! Redirection vers /login...\");\n            this.auth.signOut();\n            this.router.navigate(['/login']);\n          }\n        }\n        return throwError(() => err);\n      }));\n    }\n    static #_ = this.ɵfac = function TokenInterceptor_Factory(t) {\n      return new (t || TokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}