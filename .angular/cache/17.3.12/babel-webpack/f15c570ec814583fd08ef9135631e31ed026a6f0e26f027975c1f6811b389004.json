{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.authUrl = \"http://localhost:5071/api/Auth/\";\n      this.jwtHelper = new JwtHelperService();\n    }\n    login(loginObj) {\n      return this.http.post(`${this.authUrl}authenticate`, loginObj);\n    }\n    storeToken(tokenValue) {\n      if (tokenValue) {\n        localStorage.setItem('token', tokenValue);\n        console.log(\"Token enregistré :\", tokenValue);\n      } else {\n        console.warn(\"⚠️ Aucun token valide reçu !\");\n      }\n    }\n    getToken() {\n      return localStorage.getItem('token') || ''; // ✅ Retourne une chaîne vide si aucun token\n    }\n    /** ✅ Correction de decodeToken() */\n    decodeToken() {\n      const token = this.getToken();\n      if (!token) return null;\n      try {\n        return this.jwtHelper.decodeToken(token);\n      } catch (error) {\n        console.error(\"Erreur lors du décodage du token :\", error);\n        return null;\n      }\n    }\n    /** ✅ Correction de isLoggedIn() */\n    isLoggedIn() {\n      const token = this.getToken();\n      return token && !this.jwtHelper.isTokenExpired(token);\n    }\n    /** ✅ Correction de getFullNameFromToken() */\n    getFullNameFromToken() {\n      const decodedToken = this.decodeToken();\n      return decodedToken ? decodedToken.unique_name || '' : '';\n    }\n    signOut() {\n      localStorage.clear();\n      console.log(\"Déconnexion en cours...\");\n      this.router.navigate(['/login']);\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}