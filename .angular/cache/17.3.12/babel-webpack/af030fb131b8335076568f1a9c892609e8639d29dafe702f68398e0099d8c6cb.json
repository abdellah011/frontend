{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { AuthService } from 'app/services/auth.service';\nimport { Router } from '@angular/router';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let tokenInterceptor = /*#__PURE__*/(() => {\n  class tokenInterceptor {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n    }\n    intercept(req, next) {\n      // ✅ Récupérer le token JWT depuis le localStorage\n      const myToken = this.auth.getToken();\n      // ✅ Ajouter le token à l'en-tête de la requête si disponible\n      let authReq = req;\n      if (myToken) {\n        authReq = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${myToken}`\n          }\n        });\n      }\n      // ✅ Gérer les erreurs globales\n      return next.handle(authReq);\n    }\n    static #_ = this.ɵfac = function tokenInterceptor_Factory(t) {\n      return new (t || tokenInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: tokenInterceptor,\n      factory: tokenInterceptor.ɵfac\n    });\n  }\n  return tokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}