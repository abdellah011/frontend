{"ast":null,"code":"import { Renderer2, ElementRef } from '@angular/core';\nimport { ROUTES } from '../../sidebar/sidebar.component';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { AuthService } from 'app/services/auth.service';\nimport { UserStoreService } from 'app/services/userStore/user-store.service';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"app/services/userStore/user-store.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"app/services/auth.service\";\nconst _c0 = [\"navbar-cmp\"];\nexport let NavbarComponent = /*#__PURE__*/(() => {\n  class NavbarComponent {\n    constructor(location, renderer, userStore, element, router, auth) {\n      this.renderer = renderer;\n      this.userStore = userStore;\n      this.element = element;\n      this.router = router;\n      this.auth = auth;\n      this.fullName = \"\";\n      this.isCollapsed = true;\n      this.location = location;\n      this.nativeElement = element.nativeElement;\n      this.sidebarVisible = false;\n    }\n    ngOnInit() {\n      this.listTitles = ROUTES.filter(listTitle => listTitle);\n      let navbar = this.element.nativeElement;\n      this.toggleButton = navbar.getElementsByClassName('navbar-toggle')[0];\n      this.router.events.subscribe(() => {\n        this.sidebarClose();\n      });\n      // ✅ Écoute les mises à jour du nom depuis `UserStoreService`\n      this.userStore.getFullName().subscribe(val => {\n        if (val) {\n          this.fullName = val;\n        } else {\n          let fullNameFromToken = this.auth.getFullNameFromToken();\n          this.fullName = val || fullNameFromToken;\n        }\n      });\n    }\n    getTitle() {\n      let titlee = this.location.prepareExternalUrl(this.location.path());\n      if (titlee.charAt(0) === '#') {\n        titlee = titlee.slice(1);\n      }\n      for (let item = 0; item < this.listTitles.length; item++) {\n        if (this.listTitles[item].path === titlee) {\n          return this.listTitles[item].title;\n        }\n      }\n      return 'Dashboard';\n    }\n    sidebarToggle() {\n      if (this.sidebarVisible === false) {\n        this.sidebarOpen();\n      } else {\n        this.sidebarClose();\n      }\n    }\n    sidebarOpen() {\n      if (!this.toggleButton) return;\n      const toggleButton = this.toggleButton;\n      const html = document.getElementsByTagName('html')[0];\n      const mainPanel = document.getElementsByClassName('main-panel')[0];\n      setTimeout(() => {\n        toggleButton.classList.add('toggled');\n      }, 500);\n      html.classList.add('nav-open');\n      if (window.innerWidth < 991) {\n        mainPanel.style.position = 'fixed';\n      }\n      this.sidebarVisible = true;\n    }\n    sidebarClose() {\n      const html = document.getElementsByTagName('html')[0];\n      const mainPanel = document.getElementsByClassName('main-panel')[0];\n      if (window.innerWidth < 991) {\n        setTimeout(() => {\n          mainPanel.style.position = '';\n        }, 500);\n      }\n      if (this.toggleButton) {\n        this.toggleButton.classList.remove('toggled');\n      }\n      this.sidebarVisible = false;\n      html.classList.remove('nav-open');\n    }\n    // ✅ Ajout d'un popup SweetAlert2 pour confirmer la déconnexion\n    logOut() {\n      Swal.fire({\n        title: \"Déconnexion\",\n        text: \"Êtes-vous sûr de vouloir vous déconnecter ?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        confirmButtonColor: \"#d33\",\n        cancelButtonColor: \"#3085d6\",\n        confirmButtonText: \"Oui, me déconnecter\",\n        cancelButtonText: \"Annuler\"\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.auth.signOut();\n          this.router.navigate(['/login']);\n        }\n      });\n    }\n    static #_ = this.ɵfac = function NavbarComponent_Factory(t) {\n      return new (t || NavbarComponent)(i0.ɵɵdirectiveInject(i1.Location), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.UserStoreService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.AuthService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: NavbarComponent,\n      selectors: [[\"navbar-cmp\"]],\n      viewQuery: function NavbarComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.button = _t.first);\n        }\n      },\n      decls: 15,\n      vars: 1,\n      consts: [[1, \"navbar\", \"navbar-expand-lg\", \"navbar-absolute\", \"fixed-top\", \"navbar-transparent\"], [1, \"container-fluid\", \"d-flex\", \"justify-content-between\", \"align-items-center\"], [1, \"flex-grow-1\", \"mr-3\"], [1, \"input-group\", \"no-border\"], [1, \"input-group-append\"], [1, \"input-group-text\"], [1, \"nc-icon\", \"nc-zoom-split\"], [1, \"d-flex\", \"align-items-center\"], [1, \"mb-0\", \"mr-3\"], [1, \"btn\", \"btn-logout\", 3, \"click\"], [1, \"nc-icon\", \"nc-button-power\"]],\n      template: function NavbarComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"nav\", 0)(1, \"div\", 1)(2, \"form\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5);\n          i0.ɵɵelement(6, \"i\", 6);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(7, \"div\", 7)(8, \"h4\", 8)(9, \"span\");\n          i0.ɵɵtext(10, \"Utilisateur :\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(11);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function NavbarComponent_Template_button_click_12_listener() {\n            return ctx.logOut();\n          });\n          i0.ɵɵelement(13, \"i\", 10);\n          i0.ɵɵtext(14, \" D\\u00E9connexion \");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(11);\n          i0.ɵɵtextInterpolate(ctx.fullName);\n        }\n      },\n      styles: [\"\\n\\n  h3[_ngcontent-%COMP%] {\\n    color: rebeccapurple; \\n\\n    font-weight: bold;\\n  }\\n\\n  \\n\\n  h3[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n    color: black; \\n\\n    font-weight: normal;\\n  }\\n\\n  \\n\\n  .btn-logout[_ngcontent-%COMP%] {\\n    background-color: red; \\n\\n    color: white; \\n\\n    border: none;\\n    padding: 8px 16px;\\n    font-size: 16px;\\n    border-radius: 8px;\\n    transition: 0.3s ease-in-out;\\n  }\\n\\n  .btn-logout[_ngcontent-%COMP%]:hover {\\n    background-color: darkred; \\n\\n  }\"]\n    });\n  }\n  return NavbarComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}