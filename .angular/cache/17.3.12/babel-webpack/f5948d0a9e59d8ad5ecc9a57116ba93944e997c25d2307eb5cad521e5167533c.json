{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { AuthService } from 'app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let tokenInterceptor = /*#__PURE__*/(() => {\n  class tokenInterceptor {\n    constructor(auth, router) {\n      this.auth = auth;\n      this.router = router;\n    }\n    intercept(req, next) {\n      const myToken = this.auth.getToken();\n      // VÃ©rifier immÃ©diatement si le token est expirÃ© AVANT d'envoyer la requÃªte\n      if (this.auth.isTokenExpired()) {\n        console.warn(\"ðŸ”´ Token expirÃ© ! DÃ©connexion...\");\n        this.auth.signOut();\n        this.router.navigate(['/login']);\n        return throwError(() => new Error(\"Token expirÃ©\"));\n      }\n      let authReq = req;\n      if (myToken) {\n        authReq = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${myToken}`\n          }\n        });\n      }\n      return next.handle(authReq).pipe(catchError(err => {\n        if (err instanceof HttpErrorResponse) {\n          console.error(\"ðŸš¨ Erreur HTTP interceptÃ©e :\", err);\n          if (err.status === 401) {\n            // 401 Unauthorized\n            console.warn(\"ðŸš¨ Non autorisÃ© ! DÃ©connexion...\");\n            this.auth.signOut();\n            this.router.navigate(['/login']);\n          }\n        }\n        return throwError(() => err);\n      }));\n    }\n    static #_ = this.Éµfac = function tokenInterceptor_Factory(t) {\n      return new (t || tokenInterceptor)(i0.ÉµÉµinject(i1.AuthService), i0.ÉµÉµinject(i2.Router));\n    };\n    static #_2 = this.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n      token: tokenInterceptor,\n      factory: tokenInterceptor.Éµfac\n    });\n  }\n  return tokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}