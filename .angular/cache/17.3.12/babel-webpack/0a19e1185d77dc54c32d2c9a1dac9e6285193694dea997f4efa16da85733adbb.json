{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let authService = /*#__PURE__*/(() => {\n  class authService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.authUrl = \"http://localhost:5071/api/Auth/\";\n      this.jwtHelper = new JwtHelperService();\n    }\n    login(loginObj) {\n      return this.http.post(`${this.authUrl}authenticate`, loginObj);\n    }\n    storeToken(tokenValue) {\n      if (tokenValue) {\n        localStorage.setItem('token', tokenValue);\n        console.log(\"Token enregistré :\", tokenValue);\n      } else {\n        console.warn(\"⚠️ Aucun token valide reçu !\");\n      }\n    }\n    getToken() {\n      return localStorage.getItem('token') || ''; // ✅ Retourne une chaîne vide si aucun token\n    }\n    isTokenExpired() {\n      const token = this.getToken();\n      if (!token) return true;\n      try {\n        const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n        const expirationTime = tokenPayload.exp * 1000;\n        return Date.now() >= expirationTime;\n      } catch (error) {\n        console.error(\"Erreur lors du décodage du token :\", error);\n        return true;\n      }\n    }\n    checkTokenExpiration() {\n      if (this.isTokenExpired()) {\n        Swal.fire({\n          title: \"Session expirée ⚠️\",\n          text: \"Votre session a expiré. Veuillez vous reconnecter.\",\n          icon: \"warning\",\n          confirmButtonText: \"OK\",\n          allowOutsideClick: false\n        }).then(() => {\n          this.signOut();\n          this.router.navigate(['/login']);\n        });\n      }\n    }\n    signOut() {\n      localStorage.clear();\n      console.log(\"Déconnexion en cours...\");\n      this.router.navigate(['/login']);\n    }\n    static #_ = this.ɵfac = function authService_Factory(t) {\n      return new (t || authService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: authService,\n      factory: authService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return authService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}