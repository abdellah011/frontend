{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.authUrl = \"http://localhost:5071/api/Auth/\";\n      this.userPayload = this.decodeToken();\n    }\n    login(loginObj) {\n      return this.http.post(`${this.authUrl}authenticate`, loginObj);\n    }\n    isTokenExpired() {\n      const token = this.getToken();\n      if (!token) return true; // Pas de token = expir√©\n      try {\n        const tokenPayload = JSON.parse(atob(token.split('.')[1]));\n        const expirationTime = tokenPayload.exp * 1000; // Convertir en millisecondes\n        return Date.now() >= expirationTime;\n      } catch (error) {\n        console.error(\"Erreur lors du d√©codage du token :\", error);\n        return true; // Si erreur, on suppose que le token est expir√©\n      }\n    }\n    storeToken(tokenValue) {\n      localStorage.setItem('token', tokenValue);\n      console.log(\"Token enregistr√© :\", tokenValue);\n    }\n    getToken() {\n      return localStorage.getItem('token');\n    }\n    isLoggedIn() {\n      if (this.isTokenExpired()) {\n        this.signOut(); // ‚úÖ D√©connecter automatiquement si expir√©\n        return false;\n      }\n      return !!this.getToken();\n    }\n    signOut() {\n      localStorage.clear();\n      console.log(\"D√©connexion en cours...\");\n      this.router.navigate(['login']);\n    }\n    decodeToken() {\n      const jwtHelper = new JwtHelperService();\n      const token = this.getToken();\n      console.log(jwtHelper.decodeToken(token));\n      return jwtHelper.decodeToken(token);\n    }\n    // ‚úÖ R√©cup√©ration correcte du nom depuis le token\n    getFullNameFromToken() {\n      if (!this.userPayload) {\n        this.userPayload = this.decodeToken(); // üî• R√©cup√©rer les infos du token si elles ne sont pas encore charg√©es\n      }\n      return this.userPayload?.[\"unique_name\"] || ''; // ‚úÖ Assure-toi d'utiliser la bonne cl√©}\n    }\n    getRoleFromToken() {\n      if (!this.userPayload) {\n        this.userPayload = this.decodeToken(); // üî• R√©cup√©rer les infos du token si elles ne sont pas encore charg√©es\n      }\n      return this.userPayload?.[\"role\"] || ''; // ‚úÖ Assure-toi d'utiliser la bonne cl√©}\n    }\n    static #_ = this.…µfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.…µ…µinject(i1.HttpClient), i0.…µ…µinject(i2.Router));\n    };\n    static #_2 = this.…µprov = /*@__PURE__*/i0.…µ…µdefineInjectable({\n      token: AuthService,\n      factory: AuthService.…µfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}