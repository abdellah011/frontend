{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { UserServiceTsService } from 'app/shared/user/user.service.ts.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AddUserDialogComponent } from 'app/components/add-user-dialog/add-user-dialog.component';\nlet TableComponent = class TableComponent {\n  constructor(userServiceTsService, dialog) {\n    this.userServiceTsService = userServiceTsService;\n    this.dialog = dialog;\n    this.displayedColumns = ['id', 'name', 'email', 'department', 'role', 'password', 'actions'];\n    this.dataSource = new MatTableDataSource([]); // ✅ Correction : initialisation correcte\n    this.searchId = '';\n    this.isEditing = false;\n    this.selectedUser = null;\n    this.users = [];\n  }\n  ngOnInit() {\n    this.loadUsers();\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      if (this.paginator) {\n        this.dataSource.paginator = this.paginator;\n        console.log(\"✅ Paginator bien assigné !\");\n      } else {\n        console.error(\"❌ Erreur : Paginator non trouvé !\");\n      }\n    });\n  }\n  // ✅ Charger les utilisateurs depuis l'API\n  loadUsers() {\n    this.userServiceTsService.getUsers().subscribe({\n      next: data => {\n        console.log(\"📢 Données récupérées depuis l'API :\", data);\n        if (!data || data.length === 0) {\n          console.warn(\"⚠️ Aucun utilisateur trouvé !\");\n        }\n        this.users = data;\n        this.dataSource.data = data; // ✅ Correction : mise à jour correcte de `dataSource`\n        setTimeout(() => {\n          if (this.paginator) {\n            this.dataSource.paginator = this.paginator;\n          }\n        });\n      },\n      error: err => {\n        console.error('🚨 Erreur lors de la récupération des utilisateurs:', err);\n      }\n    });\n  }\n  // ✅ Filtrer les utilisateurs par ID\n  applyFilter() {\n    this.dataSource.filter = this.searchId.trim().toLowerCase();\n  }\n  // ✅ Ajouter un utilisateur via un dialogue\n  addUser() {\n    const dialogRef = this.dialog.open(AddUserDialogComponent, {\n      width: '400px',\n      autoFocus: true,\n      disableClose: false\n    });\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.userServiceTsService.addUser(result).subscribe(() => this.loadUsers());\n      }\n    });\n  }\n  // ✅ Modifier un utilisateur\n  editUser(user) {\n    this.selectedUser = {\n      ...user\n    };\n    this.isEditing = true;\n  }\n  updateUser() {\n    if (this.selectedUser) {\n      this.userServiceTsService.updateUser(this.selectedUser).subscribe({\n        next: () => {\n          this.loadUsers();\n          this.cancelEdit();\n        },\n        error: err => {\n          console.error(\"Erreur lors de la mise à jour de l'utilisateur:\", err);\n        }\n      });\n    }\n  }\n  // ✅ Supprimer un utilisateur\n  deleteUser(id) {\n    this.userServiceTsService.deleteUser(id).subscribe(() => this.loadUsers());\n  }\n  // ✅ Annuler la modification\n  cancelEdit() {\n    this.isEditing = false;\n    this.selectedUser = null;\n  }\n};\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], TableComponent.prototype, \"paginator\", void 0);\nTableComponent = __decorate([Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html'\n}), __metadata(\"design:paramtypes\", [UserServiceTsService, MatDialog])], TableComponent);\nexport { TableComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}