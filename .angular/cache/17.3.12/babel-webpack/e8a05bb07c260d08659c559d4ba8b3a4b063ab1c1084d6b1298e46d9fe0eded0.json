{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'app/services/auth.service';\nimport { UserStoreService } from 'app/services/userStore/user-store.service';\nimport Swal from 'sweetalert2';\nlet LoginComponent = class LoginComponent {\n  constructor(fb, auth, router, userStore) {\n    this.fb = fb;\n    this.auth = auth;\n    this.router = router;\n    this.userStore = userStore;\n  }\n  ngOnInit() {\n    this.loginForm = this.fb.group({\n      name: ['', [Validators.required]],\n      Password: ['', [Validators.required]]\n    });\n  }\n  onlogin() {\n    if (this.loginForm.valid) {\n      this.auth.login(this.loginForm.value).subscribe({\n        next: res => {\n          Swal.fire({\n            title: \"Connexion réussie ✅\",\n            text: res.message,\n            icon: \"success\",\n            timer: 1000,\n            // ✅ Le popup disparaît après 3 secondes\n            showConfirmButton: false,\n            // ✅ Supprime le bouton \"OK\"\n            position: \"top\" // ✅ Position en haut à droite\n          }).then(() => {\n            this.auth.storeToken(res.accessToken);\n            let tokenPayload = this.auth.decodeToken();\n            this.userStore.setFullName(tokenPayload.unique_name);\n            this.router.navigate(['../../pages/dashboard']);\n          });\n        },\n        error: err => {\n          Swal.fire({\n            title: \"Erreur ❌\",\n            text: err?.error.message || \"Une erreur s'est produite\",\n            icon: \"error\",\n            timer: 1000,\n            // ✅ Le popup disparaît après 3 secondes\n            showConfirmButton: false,\n            // ✅ Supprime le bouton \"OK\"\n            position: \"top\" // ✅ Position en haut à droite\n          });\n        }\n      });\n    } else {\n      console.log('Formulaire non valide');\n      this.validateFormFields(this.loginForm);\n      Swal.fire({\n        title: \"Formulaire invalide ⚠️\",\n        text: \"Veuillez remplir tous les champs obligatoires\",\n        icon: \"warning\",\n        timer: 1000,\n        // ✅ Le popup disparaît après 3 secondes\n        showConfirmButton: false,\n        // ✅ Supprime le bouton \"OK\"\n        position: \"top\" // ✅ Position en haut à droite\n      });\n    }\n  }\n  validateFormFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof FormControl) {\n        control.markAsDirty({\n          onlySelf: true\n        });\n      } else if (control instanceof FormGroup) {\n        this.validateFormFields(control);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n}), __metadata(\"design:paramtypes\", [FormBuilder, AuthService, Router, UserStoreService])], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}